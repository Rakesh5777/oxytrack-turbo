/* tslint:disable */
/* eslint-disable */
/**
 * Oxytrack API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface Ambulance
 */
export interface Ambulance {
  /**
   * Id of the ambulance
   * @type {number}
   * @memberof Ambulance
   */
  id: number;
  /**
   * Name of the ambulance
   * @type {string}
   * @memberof Ambulance
   */
  ambulanceName: string;
  /**
   * Number of the ambulance
   * @type {string}
   * @memberof Ambulance
   */
  ambulanceNumber: string;
  /**
   * Email address of the ambulance
   * @type {String | null}
   * @memberof Ambulance
   */
  emailAddress?: String | null;
  /**
   * Description of the ambulance
   * @type {String | null}
   * @memberof Ambulance
   */
  description?: String | null;
  /**
   * list of contact persons ids
   * @type {Array<ContactPerson>}
   * @memberof Ambulance
   */
  contactPersons: Array<ContactPerson>;
  /**
   * Created date of the ambulance
   * @type {Date}
   * @memberof Ambulance
   */
  createdAt: Date;
  /**
   * Status of the ambulance
   * @type {boolean}
   * @memberof Ambulance
   */
  active?: boolean;
}
/**
 *
 * @export
 * @interface ContactPerson
 */
export interface ContactPerson {
  /**
   * Id of the contact person
   * @type {number}
   * @memberof ContactPerson
   */
  id?: number;
  /**
   * Name of the contact person
   * @type {string}
   * @memberof ContactPerson
   */
  contactName: string;
  /**
   * Mobile number of the contact person
   * @type {string}
   * @memberof ContactPerson
   */
  mobileNumber: string;
  /**
   * Status of the contact person
   * @type {boolean}
   * @memberof ContactPerson
   */
  active?: boolean;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   * Type of the http error
   * @type {Any}
   * @memberof ErrorResponse
   */
  error: Any;
  /**
   * Detailed description of the error
   * @type {string}
   * @memberof ErrorResponse
   */
  message: string;
}
/**
 *
 * @export
 * @interface MasterSignInRequest
 */
export interface MasterSignInRequest {
  /**
   * username of the master user
   * @type {string}
   * @memberof MasterSignInRequest
   */
  username: string;
  /**
   * password of the user
   * @type {string}
   * @memberof MasterSignInRequest
   */
  password: string;
  /**
   * Date and time of the user creation
   * @type {Date}
   * @memberof MasterSignInRequest
   */
  createdAt?: Date;
}
/**
 *
 * @export
 * @interface WritableAmbulance
 */
export interface WritableAmbulance {
  /**
   * Name of the ambulance
   * @type {string}
   * @memberof WritableAmbulance
   */
  ambulanceName: string;
  /**
   * Number of the ambulance
   * @type {string}
   * @memberof WritableAmbulance
   */
  ambulanceNumber: string;
  /**
   * Email address of the ambulance
   * @type {string}
   * @memberof WritableAmbulance
   */
  emailAddress?: string;
  /**
   * Description of the ambulance
   * @type {string}
   * @memberof WritableAmbulance
   */
  description?: string;
  /**
   * list of contact person ids
   * @type {Array<number>}
   * @memberof WritableAmbulance
   */
  contactPersonIds: Array<number>;
  /**
   * Status of the ambulance
   * @type {boolean}
   * @memberof WritableAmbulance
   */
  active?: boolean;
}
/**
 *
 * @export
 * @interface WritableContactPerson
 */
export interface WritableContactPerson {
  /**
   * Name of the contact person
   * @type {string}
   * @memberof WritableContactPerson
   */
  contactName: string;
  /**
   * Mobile number of the contact person
   * @type {string}
   * @memberof WritableContactPerson
   */
  mobileNumber: string;
  /**
   * Status of the contact person
   * @type {boolean}
   * @memberof WritableContactPerson
   */
  active?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Create Ambulance
     * @param {WritableAmbulance} writableAmbulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAmbulance: async (
      writableAmbulance: WritableAmbulance,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'writableAmbulance' is not null or undefined
      assertParamExists(
        "createAmbulance",
        "writableAmbulance",
        writableAmbulance,
      );
      const localVarPath = `/customer/ambulance/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        writableAmbulance,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create Contact Person
     * @param {WritableContactPerson} writableContactPerson
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContactPerson: async (
      writableContactPerson: WritableContactPerson,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'writableContactPerson' is not null or undefined
      assertParamExists(
        "createContactPerson",
        "writableContactPerson",
        writableContactPerson,
      );
      const localVarPath = `/contactPerson/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        writableContactPerson,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Master User Sign In
     * @param {MasterSignInRequest} masterSignInRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    masterUserSignIn: async (
      masterSignInRequest: MasterSignInRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'masterSignInRequest' is not null or undefined
      assertParamExists(
        "masterUserSignIn",
        "masterSignInRequest",
        masterSignInRequest,
      );
      const localVarPath = `/masterUser/signIn`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        masterSignInRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create Ambulance
     * @param {WritableAmbulance} writableAmbulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAmbulance(
      writableAmbulance: WritableAmbulance,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<WritableAmbulance>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAmbulance(
        writableAmbulance,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.createAmbulance"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create Contact Person
     * @param {WritableContactPerson} writableContactPerson
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createContactPerson(
      writableContactPerson: WritableContactPerson,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<WritableContactPerson>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createContactPerson(
          writableContactPerson,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.createContactPerson"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Master User Sign In
     * @param {MasterSignInRequest} masterSignInRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async masterUserSignIn(
      masterSignInRequest: MasterSignInRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<MasterSignInRequest>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.masterUserSignIn(
          masterSignInRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.masterUserSignIn"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary Create Ambulance
     * @param {WritableAmbulance} writableAmbulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAmbulance(
      writableAmbulance: WritableAmbulance,
      options?: any,
    ): AxiosPromise<WritableAmbulance> {
      return localVarFp
        .createAmbulance(writableAmbulance, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create Contact Person
     * @param {WritableContactPerson} writableContactPerson
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContactPerson(
      writableContactPerson: WritableContactPerson,
      options?: any,
    ): AxiosPromise<WritableContactPerson> {
      return localVarFp
        .createContactPerson(writableContactPerson, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Master User Sign In
     * @param {MasterSignInRequest} masterSignInRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    masterUserSignIn(
      masterSignInRequest: MasterSignInRequest,
      options?: any,
    ): AxiosPromise<MasterSignInRequest> {
      return localVarFp
        .masterUserSignIn(masterSignInRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Create Ambulance
   * @param {WritableAmbulance} writableAmbulance
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createAmbulance(
    writableAmbulance: WritableAmbulance,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .createAmbulance(writableAmbulance, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create Contact Person
   * @param {WritableContactPerson} writableContactPerson
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createContactPerson(
    writableContactPerson: WritableContactPerson,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .createContactPerson(writableContactPerson, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Master User Sign In
   * @param {MasterSignInRequest} masterSignInRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public masterUserSignIn(
    masterSignInRequest: MasterSignInRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .masterUserSignIn(masterSignInRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
