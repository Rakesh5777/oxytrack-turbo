// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MasterUsers {
  id           String  @id @unique @default(dbgenerated("gen_random_uuid()"))
  email        String  @unique
  password     String
  firstName    String
  lastName     String
  username     String  @unique
  mobileNumber String
  active       Boolean @default(true)
}

enum CustomerType {
  HOSPITAL
  AMBULANCE
  LABORATORY
  HOUSEHOLD
}

model Customers {
  id               String             @id @unique @default(dbgenerated("gen_random_uuid()"))
  type             CustomerType
  name             String
  number           String
  emailAddress     String?
  address          String?
  description      String?
  contacts          CustomerContact[]
  entityRequirments EntityRequirment[]
  additionalRecords AdditionalRecord[]
  active           Boolean            @default(true)
  createdAt        DateTime           @default(now())
}

model EntityRequirment {
  id         String    @id @unique @default(dbgenerated("gen_random_uuid()"))
  customerId String
  customer   Customers @relation(fields: [customerId], references: [id])
  key        String
  value      String
}

model AdditionalRecord {
  id         String    @id @unique @default(dbgenerated("gen_random_uuid()"))
  customerId String
  customer   Customers @relation(fields: [customerId], references: [id])
  key        String
  value      String
}

model Contact {
  id           String     @id @unique @default(dbgenerated("gen_random_uuid()"))
  contactName  String
  mobileNumber String     @unique
  customersId  String?
  Customers    CustomerContact[]
  active       Boolean    @default(true)
}

// Join table for many-to-many relationship between Customer and Contact
model CustomerContact {
  customerId String
  contactId  String
  customer   Customers @relation(fields: [customerId], references: [id])
  contact    Contact  @relation(fields: [contactId], references: [id])

  @@id([customerId, contactId])
}