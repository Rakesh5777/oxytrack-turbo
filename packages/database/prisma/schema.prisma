// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MasterUsers {
  id           String  @id @unique @default(dbgenerated("gen_random_uuid()"))
  email        String  @unique
  password     String
  firstName    String
  lastName     String
  username     String  @unique
  mobileNumber String
  active       Boolean @default(true)
}

model WareHouse {
  id        String     @id @unique @default(dbgenerated("gen_random_uuid()"))
  name      String     @unique
  address   String
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
}

model Employees {
  id                  String                @id @unique @default(dbgenerated("gen_random_uuid()"))
  name                String
  email               String                @unique
  mobileNumber        String                @unique
  password            String
  active              Boolean               @default(true)
  createdAt           DateTime              @default(now())
  cylinderTransaction CylinderTransaction[]
}

enum CustomerType {
  HOSPITAL
  AMBULANCE
  LABORATORY
  HOUSEHOLD
}

model Customers {
  id                 String             @id @unique @default(dbgenerated("gen_random_uuid()"))
  type               CustomerType
  name               String             @unique
  number             String
  emailAddress       String?
  address            String?
  description        String?
  contacts           CustomerContact[]
  entityRequirements EntityRequirment[]
  additionalRecords  AdditionalRecord[]
  cylinders          Cylinders[]
  active             Boolean            @default(true)
  createdAt          DateTime           @default(now())
}

model EntityRequirment {
  id         String    @id @unique @default(dbgenerated("gen_random_uuid()"))
  customerId String
  customer   Customers @relation(fields: [customerId], references: [id])
  key        String
  value      String
}

model AdditionalRecord {
  id         String    @id @unique @default(dbgenerated("gen_random_uuid()"))
  customerId String
  customer   Customers @relation(fields: [customerId], references: [id])
  key        String
  value      String
}

model Contact {
  id           String            @id @unique @default(dbgenerated("gen_random_uuid()"))
  contactName  String
  mobileNumber String            @unique
  Customers    CustomerContact[]
  active       Boolean           @default(true)
}

model CustomerContact {
  customerId String
  contactId  String
  customer   Customers @relation(fields: [customerId], references: [id])
  contact    Contact   @relation(fields: [contactId], references: [id])

  @@id([customerId, contactId])
}

enum CylinderType {
  OXYGEN
  NITRUOUS_OXIDE
  CARBON_DIOXIDE
}

enum CylinderSize {
  TYPE_A
  TYPE_B
  TYPE_D
}

enum CylinderState {
  FULL
  EMPTY
  IN_USE
  IN_SERVICE
  IN_REPAIR
}

model Cylinders {
  id                  String                @id @unique @default(dbgenerated("gen_random_uuid()"))
  cylinderId          String                @unique
  type                CylinderType
  size                CylinderSize
  customerId          String?
  customers           Customers?            @relation(fields: [customerId], references: [id])
  cylinderState       CylinderState         @default(FULL)
  currentLocationId   String?
  currentLocation     Location?             @relation(fields: [currentLocationId], references: [id])
  purchaseDate        DateTime
  active              Boolean               @default(true)
  createdAt           DateTime              @default(now())
  cylinderTransaction CylinderTransaction[]
}

enum LocationEntityTypes {
  CUSTOMER
  WAREHOUSE
}

model Location {
  id            String                @id @unique @default(dbgenerated("gen_random_uuid()"))
  latitude      Float
  longitude     Float
  entityId      String
  entityType    LocationEntityTypes
  active        Boolean               @default(true)
  createdAt     DateTime              @default(now())
  cylinders     Cylinders[]
  fromLocations CylinderTransaction[] @relation("fromLocation")
  toLocations   CylinderTransaction[] @relation("toLocation")
}

enum TransactionType {
  INWARDS
  OUTWARDS
  TRANSFER
  REFILL
}

model CylinderTransaction {
  id              String          @id @unique @default(dbgenerated("gen_random_uuid()"))
  employeeId      String
  employee        Employees       @relation(fields: [employeeId], references: [id])
  cylinderId      String
  cylinder        Cylinders       @relation(fields: [cylinderId], references: [id])
  cylinderState   CylinderState
  fromLocationId  String
  fromLocation    Location        @relation("fromLocation", fields: [fromLocationId], references: [id])
  toLocationId    String
  toLocation      Location        @relation("toLocation", fields: [toLocationId], references: [id])
  transactionDate DateTime
  transactionType TransactionType
  active          Boolean         @default(true)
  createdAt       DateTime        @default(now())
}
